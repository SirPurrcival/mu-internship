import numpy as np
import pickle



def setup():
    #######################################
    ## Set parameters for the simulation ##
    #######################################
    
    ## Recording and simulation parameters
    params = {
        'rec_start'  :   200.,                                                      # start point for data recording
        'rec_stop'   :   1000.,                                                      # end points for data recording
        'sim_time'   :   1000.,                                                      # Time the network is simulated in ms
        'calc_lfp'   :  False,                                                      # Flag to use LFP approximation procedure
        'verbose'    :  True,                                                       # Flag for verbose function output
        'K_scale'    :     1.,                                                      # Scaling factor for connections
        'syn_scale'  :     1.,                                                      # Scaling factor for synaptic strenghts
        'N_scale'    :     .5,                                                      # Scaling factor for the number of neurons
        'R_scale'    :     0.1,                                                     # Fraction of neurons to be recorded from
        'opt_run'    :   False,                                                     # Flag for optimizer run, run minimal settings
        'g'          :      4.,                                                     # Excitation-Inhibition balance
        'resolution' :   2**-3,                                                     # Resolution of the simulaton
        'transient'  :     200,                                                     # Ignore the first x ms of the simulation
        'th_in'      :   100.0*0.0,                                                 # Thalamic input, nodes x frequency
        'num_neurons': np.array([776, 47386, 3876, 2807, 6683, 70387, 9502, 5455,   # Number of neurons by population
                          2640, 20740, 2186, 1958, 410, 19839, 1869, 1869, 325]),
        'label'      : ['Htr','E','Pv','Sst','Htr','E','Pv','Sst','Htr','E','Pv',   # Label for the populations
                        'Sst','Htr','E','Pv','Sst','Htr'],
        'cell_type'  : np.load('cells.npy', allow_pickle=True).item(),              # cell types, courtesy of the allen institute
        'layer_type' : ['L1_Htr3a',                                                 # Layer and cell types
                        'L23_E', 'L23_Pvalb', 'L23_Sst', 'L23_Htr3a',
                        'L4_E', 'L4_Pvalb', 'L4_Sst', 'L4_Htr3a',  
                        'L5_E', 'L5_Pvalb', 'L5_Sst', 'L5_Htr3a', 
                        'L6_E', 'L6_Pvalb',  'L6_Sst', 'L6_Htr3a']
        }
    
    ################################################################
    ## Specify connectivity in and between layers and populations ##
    ################################################################
    
    # Connectivity matrix layertype X layertype
    params['connectivity'] = np.array([[0.656, 0.356, 0.093, 0.068, 0.4644, 0.148, 0    , 0    , 0    , 0.148, 0    , 0    , 0    , 0.148, 0    , 0    , 0    ],
                                      [0    , 0.16 , 0.395, 0.182, 0.105 , 0.016, 0.083, 0.083, 0.083, 0.083, 0.081, 0.102, 0    , 0    , 0    , 0    , 0    ],
                                      [0.024, 0.411, 0.451, 0.03 , 0.22  , 0.05 , 0.05 , 0.05 , 0.05 , 0.07 , 0.073, 0    , 0    , 0    , 0    , 0    , 0    ],
                                      [0.279, 0.424, 0.857, 0.082, 0.77  , 0.05 , 0.05 , 0.05 , 0.05 , 0.021, 0    , 0    , 0    , 0    , 0    , 0    , 0    ],
                                      [0    , 0.087, 0.02 , 0.625, 0.028 , 0.05 , 0.05 , 0.05 , 0.05 , 0    , 0    , 0    , 0    , 0    , 0    , 0    , 0    ],
                                      [0    , 0.14 , 0.100, 0.1  , 0.1   , 0.243, 0.43 , 0.571, 0.571, 0.104, 0.101, 0.128, 0.05 , 0.032, 0    , 0    , 0    ],
                                      [0    , 0.25 , 0.050, 0.05 , 0.05  , 0.437, 0.451, 0.03 , 0.22 , 0.088, 0.091, 0.03 , 0.03 , 0    , 0    , 0    , 0    ],
                                      [0.241, 0.25 , 0.050, 0.05 , 0.05  , 0.351, 0.857, 0.082, 0.77 , 0.026, 0.03 , 0    , 0.03 , 0    , 0    , 0    , 0    ],
                                      [0    , 0.25 , 0.050, 0.05 , 0.05  , 0.351, 0.02 , 0.625, 0.028, 0    , 0.03 , 0.03 , 0.03 , 0    , 0    , 0    , 0    ],
                                      [0.017, 0.021, 0.05 , 0.05 , 0.05  , 0.007, 0.05 , 0.05 , 0.05 , 0.116, 0.083, 0.063, 0.105, 0.047, 0.03 , 0.03 , 0.03 ],
                                      [0    , 0    , 0.102, 0    , 0     , 0    , 0.034, 0.03 , 0.03 , 0.455, 0.361, 0.03 , 0.22 , 0.03 , 0.01 , 0.01 , 0.01 ],
                                      [0.203, 0.169, 0    , 0.017, 0     , 0.056, 0.03 , 0.006, 0.03 , 0.317, 0.857, 0.04 , 0.77 , 0.03 , 0.01 , 0.01 , 0.01 ],
                                      [0    , 0    , 0    , 0    , 0     , 0.03 , 0.03 , 0.03 , 0.03 , 0.125, 0.02 , 0.625, 0.02 , 0.03 , 0.01 , 0.01 , 0.01 ],
                                      [0    , 0    , 0    , 0    , 0     , 0    , 0    , 0    , 0    , 0.012, 0.01 , 0.01 , 0.01 , 0.026, 0.145, 0.1  , 0.1  ],
                                      [0    , 0.1  , 0    , 0    , 0     , 0.1  , 0    , 0    , 0    , 0.1  , 0.03 , 0.03 , 0.03 , 0.1  , 0.08 , 0.1  , 0.08 ],
                                      [0    , 0    , 0    , 0    , 0     , 0    , 0    , 0    , 0    , 0.03 , 0.03 , 0.03 , 0.03 , 0.1  , 0.05 , 0.05 , 0.05 ],
                                      [0    , 0    , 0    , 0    , 0     , 0    , 0    , 0    , 0    , 0.03 , 0.03 , 0.03 , 0.03 , 0.1  , 0.05 , 0.05 , 0.03 ]])
    
    ################################
    ## Specify synapse properties ##
    ################################
    
    params['syn_type'] = np.array([["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E"], 
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E"], 
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E"], 
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E"], 
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"],
                                      ["I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I","I"]])
    
    ## Synaptic strength
    params['syn_strength'] = np.array(
                                       [[1.73, 0.53, 0.48, 0.57, 0.78, 0.42, 0   , 0   , 0   , 0.42, 0   , 0   , 0   , 0.42, 0   , 0   , 0   ],
                                       [0      , 0.36, 1.49, 0.86, 1.31, 0.34, 1.39, 0.69, 0.91, 0.74, 1.32, 0.53, 0   , 0   , 0   , 0   , 0   ],
                                       [0.37 , 0.48, 0.68, 0.42, 0.41, 0.56, 0.68, 0.42, 0.41, 0.2 , 0.79, 0   , 0   , 0   , 0   , 0   , 0   ],
                                       [0.47 , 0.31, 0.5 , 0.15, 0.52, 0.3 , 0.5 , 0.15, 0.52, 0.22, 0   , 0   , 0   , 0   , 0   , 0   , 0   ],
                                       [0      , 0.28, 0.18, 0.32, 0.37, 0.29, 0.18, 0.32, 0.37, 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   ],
                                       [0      , 0.78, 1.39, 0.69, 0.91, 0.83, 1.29, 0.51, 0.51, 0.63, 1.25, 0.52, 0.91, 0.96, 0   , 0   , 0   ],
                                       [0      , 0.56, 0.68, 0.42, 0.41, 0.64, 0.68, 0.42, 0.41, 0.73, 0.94, 0.42, 0.41, 0   , 0   , 0   , 0   ],
                                       [0.39 , 0.3 , 0.5 , 0.15, 0.52, 0.29, 0.5 , 0.15, 0.52, 0.28, 0.45, 0.28, 0.52, 0   , 0   , 0   , 0   ],
                                       [0      , 0.29, 0.18, 0.32, 0.37, 0.29, 0.18, 0.32, 0.37, 0   , 0.18, 0.33, 0.37, 0   , 0   , 0   , 0   ],
                                       [0.76 , 0.47, 1.25, 0.52, 0.91, 0.38, 1.25, 0.52, 0.91, 0.75, 1.2 , 0.52, 1.31, 0.4 , 2.5 , 0.52, 1.31],
                                       [0      , 0   , 0.51, 0   , 0   , 0   , 0.94, 0.42, 0.41, 0.81, 1.19, 0.41, 0.41, 0.81, 1.19, 0.41, 0.41],
                                       [0.31 , 0.25, 0   , 0.39, 0   , 0.28, 0.45, 0.28, 0.52, 0.27, 0.4 , 0.4 , 0.52, 0.27, 0.4 , 0.4 , 0.52],
                                       [0     , 0   , 0   , 0   , 0   , 0.29, 0.18, 0.33, 0.37, 0.28, 0.18, 0.33, 0.37, 0.28, 0.18, 0.33, 0.37],
                                       [0     , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0.23, 2.5 , 0.52, 1.31, 0.94, 3.8 , 0.52, 1.31],
                                       [0     , 0.81, 0   , 0   , 0   , 0.81, 0   , 0   , 0   , 0.81, 1.19, 0.41, 0.41, 0.81, 1.19, 0.41, 0.41],
                                       [0     , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0.27, 0.4 , 0.4 , 0.52, 0.27, 0.4 , 0.4 , 0.52],
                                       [0     , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0   , 0.28, 0.18, 0.33, 0.37, 0.28, 0.18, 0.33, 0.37]])
    
    
    #######################################
    ## Background stimulation parameters ##
    #######################################

    params['ext_rate'] = 1.0
    params['ext_nodes']   = np.array([2000, 
                                      1400, 2000, 1400, 1400, 
                                      1500, 2100, 2100, 1500, 
                                      1500, 1500, 1500, 1500, 
                                      1700, 1500, 1500, 1500])
    params['ext_weights'] = [3.8, 
                             7.6, 5.3, 4.99, 3.45, 
                             5.1, 4.9, 3.2, 3.15, #8.14, 6.6591 
                             5.6, 5.8, 2.35, 3.95, 
                             5.35, 3.5, 2.35, 7.09]
    
    ## Write parameters to file so the network can read it in
    with open("params", 'wb') as f:
        pickle.dump(params, f)
    return params